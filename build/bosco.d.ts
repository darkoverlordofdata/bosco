/**
 * Entitas Generated Classes for example
 *
 * do not edit this file
 */
declare module example {
    import Pool = entitas.Pool;
    import IComponent = entitas.IComponent;
    enum CoreComponentIds {
        Acceleratable = 0,
        Accelerating = 1,
        Destroy = 2,
        Move = 3,
        Position = 4,
        FinishLine = 5,
        Resource = 6,
        View = 7,
        Score = 8,
        Player = 9,
        TotalComponents = 10,
    }
    class AcceleratableComponent implements IComponent {
    }
    class AcceleratingComponent implements IComponent {
    }
    class DestroyComponent implements IComponent {
    }
    class MoveComponent implements IComponent {
        speed: number;
        maxSpeed: number;
    }
    class PositionComponent implements IComponent {
        x: number;
        y: number;
        z: number;
    }
    class FinishLineComponent implements IComponent {
    }
    class ResourceComponent implements IComponent {
        name: string;
    }
    class ViewComponent implements IComponent {
        sprite: Object;
    }
    class ScoreComponent implements IComponent {
        value: number;
    }
    class PlayerComponent implements IComponent {
    }
    class Pools {
        static _allPools: Array<Pool>;
        static allPools: Array<Pool>;
        static _pool: Pool;
        static pool: Pool;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import Entity = entitas.Entity;
    import TriggerOnEvent = entitas.TriggerOnEvent;
    import IReactiveSystem = entitas.IReactiveSystem;
    import ISetPool = entitas.ISetPool;
    class AccelerateSystem implements IReactiveSystem, ISetPool {
        protected group: Group;
        trigger: TriggerOnEvent;
        /**
         * Execute when acceleration is added or removed
         * @param entities
         */
        execute(entities: Array<Entity>): void;
        setPool(pool: Pool): void;
    }
}
declare module example {
    import Entity = entitas.Entity;
    import TriggerOnEvent = entitas.TriggerOnEvent;
    import IReactiveSystem = entitas.IReactiveSystem;
    class AddViewSystem implements IReactiveSystem {
        trigger: TriggerOnEvent;
        /**
         * Execute when a Resource is added
         * @param entities
         */
        execute(entities: Array<Entity>): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import IInitializeSystem = entitas.IInitializeSystem;
    import ISetPool = entitas.ISetPool;
    class CreateFinishLineSystem implements IInitializeSystem, ISetPool {
        protected pool: Pool;
        /**
         * Create the finish line
         */
        initialize(): void;
        setPool(pool: Pool): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import IInitializeSystem = entitas.IInitializeSystem;
    import ISetPool = entitas.ISetPool;
    class CreateOpponentsSystem implements IInitializeSystem, ISetPool {
        protected pool: Pool;
        /**
         * Create an Enemy
         */
        initialize(): void;
        setPool(pool: Pool): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import IInitializeSystem = entitas.IInitializeSystem;
    import ISetPool = entitas.ISetPool;
    class CreatePlayerSystem implements IInitializeSystem, ISetPool {
        protected pool: Pool;
        /**
         * Create the Player
         */
        initialize(): void;
        setPool(pool: Pool): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Entity = entitas.Entity;
    import TriggerOnEvent = entitas.TriggerOnEvent;
    import IReactiveSystem = entitas.IReactiveSystem;
    import ISetPool = entitas.ISetPool;
    class DestroySystem implements IReactiveSystem, ISetPool {
        protected pool: Pool;
        trigger: TriggerOnEvent;
        /**
         * Execute when a Destroy component is added
         * @param entities
         */
        execute(entities: Array<Entity>): void;
        setPool(pool: Pool): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import IExecuteSystem = entitas.IExecuteSystem;
    import ISetPool = entitas.ISetPool;
    class MoveSystem implements IExecuteSystem, ISetPool {
        protected group: Group;
        /**
         * Execute motion each frame
         */
        execute(): void;
        setPool(pool: Pool): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Entity = entitas.Entity;
    import TriggerOnEvent = entitas.TriggerOnEvent;
    import IReactiveSystem = entitas.IReactiveSystem;
    import ISetPool = entitas.ISetPool;
    class ReachedFinishSystem implements IReactiveSystem, ISetPool {
        protected pool: Pool;
        trigger: TriggerOnEvent;
        /**
         * Check if anyone crossed the finish line
         * @param entities
         */
        execute(entities: Array<Entity>): void;
        setPool(pool: Pool): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import Entity = entitas.Entity;
    import IMatcher = entitas.IMatcher;
    import IComponent = entitas.IComponent;
    import TriggerOnEvent = entitas.TriggerOnEvent;
    import IMultiReactiveSystem = entitas.IMultiReactiveSystem;
    import IEnsureComponents = entitas.IEnsureComponents;
    import ISetPool = entitas.ISetPool;
    class RemoveViewSystem implements IMultiReactiveSystem, IEnsureComponents, ISetPool {
        protected pool: Pool;
        triggers: TriggerOnEvent[];
        /**
         * Execute when both Resource and Destroy are present
         * @param entities
         */
        execute(entities: Array<Entity>): void;
        ensureComponents: IMatcher;
        setPool(pool: Pool): void;
        protected onEntityRemoved(group: Group, entity: Entity, index: number, component: IComponent): void;
    }
}
declare module example {
    import Entity = entitas.Entity;
    import IMatcher = entitas.IMatcher;
    import TriggerOnEvent = entitas.TriggerOnEvent;
    import IReactiveSystem = entitas.IReactiveSystem;
    import IEnsureComponents = entitas.IEnsureComponents;
    class RenderPositionSystem implements IReactiveSystem, IEnsureComponents {
        trigger: TriggerOnEvent;
        execute(entities: Array<Entity>): void;
        ensureComponents: IMatcher;
    }
}
declare module example {
    import Systems = entitas.Systems;
    class GameController {
        systems: Systems;
        start(): void;
        stop(): void;
        update(delta: number): void;
        createSystems(pool: any): any;
    }
}
declare module example {
    class InputController {
        start(): void;
        stop(): void;
        update(delta: number): void;
    }
}
declare module example {
    import Text = PIXI.Text;
    class ScoreLabelController {
        label: Text;
        protected fps: Text;
        protected _fps: number;
        start(): void;
        update(delta: number): void;
        updateScore(score: number): void;
    }
}
declare module example {
    class MenuController {
        protected gui: any;
        start(): void;
        stop(): void;
        update(delta: number): void;
    }
}
