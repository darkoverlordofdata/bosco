/**
 * Entitas Generated Classes for example
 *
 * do not edit this file
 */
var example;
(function (example) {
    var Pool = entitas.Pool;
    (function (CoreComponentIds) {
        CoreComponentIds[CoreComponentIds["Acceleratable"] = 0] = "Acceleratable";
        CoreComponentIds[CoreComponentIds["Accelerating"] = 1] = "Accelerating";
        CoreComponentIds[CoreComponentIds["Destroy"] = 2] = "Destroy";
        CoreComponentIds[CoreComponentIds["Move"] = 3] = "Move";
        CoreComponentIds[CoreComponentIds["Position"] = 4] = "Position";
        CoreComponentIds[CoreComponentIds["FinishLine"] = 5] = "FinishLine";
        CoreComponentIds[CoreComponentIds["Resource"] = 6] = "Resource";
        CoreComponentIds[CoreComponentIds["View"] = 7] = "View";
        CoreComponentIds[CoreComponentIds["Score"] = 8] = "Score";
        CoreComponentIds[CoreComponentIds["Player"] = 9] = "Player";
        CoreComponentIds[CoreComponentIds["TotalComponents"] = 10] = "TotalComponents";
    })(example.CoreComponentIds || (example.CoreComponentIds = {}));
    var CoreComponentIds = example.CoreComponentIds;
    entitas.initialize(CoreComponentIds.TotalComponents, { "entities": 200, "components": 128 });
    var AcceleratableComponent = (function () {
        function AcceleratableComponent() {
        }
        return AcceleratableComponent;
    })();
    example.AcceleratableComponent = AcceleratableComponent;
    var AcceleratingComponent = (function () {
        function AcceleratingComponent() {
        }
        return AcceleratingComponent;
    })();
    example.AcceleratingComponent = AcceleratingComponent;
    var DestroyComponent = (function () {
        function DestroyComponent() {
        }
        return DestroyComponent;
    })();
    example.DestroyComponent = DestroyComponent;
    var MoveComponent = (function () {
        function MoveComponent() {
        }
        return MoveComponent;
    })();
    example.MoveComponent = MoveComponent;
    var PositionComponent = (function () {
        function PositionComponent() {
        }
        return PositionComponent;
    })();
    example.PositionComponent = PositionComponent;
    var FinishLineComponent = (function () {
        function FinishLineComponent() {
        }
        return FinishLineComponent;
    })();
    example.FinishLineComponent = FinishLineComponent;
    var ResourceComponent = (function () {
        function ResourceComponent() {
        }
        return ResourceComponent;
    })();
    example.ResourceComponent = ResourceComponent;
    var ViewComponent = (function () {
        function ViewComponent() {
        }
        return ViewComponent;
    })();
    example.ViewComponent = ViewComponent;
    var ScoreComponent = (function () {
        function ScoreComponent() {
        }
        return ScoreComponent;
    })();
    example.ScoreComponent = ScoreComponent;
    var PlayerComponent = (function () {
        function PlayerComponent() {
        }
        return PlayerComponent;
    })();
    example.PlayerComponent = PlayerComponent;
    var Pools = (function () {
        function Pools() {
        }
        Object.defineProperty(Pools, "allPools", {
            get: function () {
                if (Pools._allPools == null) {
                    Pools._allPools = [Pools.pool];
                }
                return Pools._allPools;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pools, "pool", {
            get: function () {
                if (Pools._pool == null) {
                    Pools._pool = new Pool(CoreComponentIds, CoreComponentIds.TotalComponents);
                    entitas.browser.VisualDebugging.init(Pools._pool);
                }
                return Pools._pool;
            },
            enumerable: true,
            configurable: true
        });
        return Pools;
    })();
    example.Pools = Pools;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var Exception = entitas.Exception;
    var AccelerateSystem = (function () {
        function AccelerateSystem() {
        }
        Object.defineProperty(AccelerateSystem.prototype, "trigger", {
            get: function () {
                return Matcher.Accelerating.onEntityAddedOrRemoved();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Execute when acceleration is added or removed
         * @param entities
         */
        AccelerateSystem.prototype.execute = function (entities) {
            if (entities.length !== 1) {
                throw new Exception("Expected exactly one entity but found " + entities.length);
            }
            var accelerate = entities[0].isAccelerating;
            var entities = this.group.getEntities();
            for (var i = 0, l = entities.length; i < l; i++) {
                var e = entities[i];
                var move = e.move;
                var speed = accelerate ? move.maxSpeed : 0;
                e.replaceMove(speed, move.maxSpeed);
            }
        };
        AccelerateSystem.prototype.setPool = function (pool) {
            this.group = pool.getGroup(Matcher.allOf(Matcher.Acceleratable, Matcher.Move));
        };
        return AccelerateSystem;
    })();
    example.AccelerateSystem = AccelerateSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var AddViewSystem = (function () {
        function AddViewSystem() {
        }
        Object.defineProperty(AddViewSystem.prototype, "trigger", {
            get: function () {
                return Matcher.Resource.onEntityAdded();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Execute when a Resource is added
         * @param entities
         */
        AddViewSystem.prototype.execute = function (entities) {
            for (var i = 0, l = entities.length; i < l; i++) {
                var e = entities[i];
                var s = bosco.prefab(e.resource.name, null);
                viewContainer.addChild(s);
                e.addView(s);
            }
        };
        return AddViewSystem;
    })();
    example.AddViewSystem = AddViewSystem;
})(example || (example = {}));
var example;
(function (example) {
    var CreateFinishLineSystem = (function () {
        function CreateFinishLineSystem() {
        }
        /**
         * Create the finish line
         */
        CreateFinishLineSystem.prototype.initialize = function () {
            this.pool.createEntity("Finish Line")
                .setFinishLine(true)
                .addResource("Finish Line")
                .addPosition(20, 500);
        };
        CreateFinishLineSystem.prototype.setPool = function (pool) {
            this.pool = pool;
        };
        return CreateFinishLineSystem;
    })();
    example.CreateFinishLineSystem = CreateFinishLineSystem;
})(example || (example = {}));
var example;
(function (example) {
    var CreateOpponentsSystem = (function () {
        function CreateOpponentsSystem() {
        }
        /**
         * Create an Enemy
         */
        CreateOpponentsSystem.prototype.initialize = function () {
            var resourceName = "Opponent";
            for (var i = 1; i < 10; i++) {
                var speed = (Math.random() + .5) * 2;
                this.pool.createEntity("Opponent" + i)
                    .addResource(resourceName)
                    .addPosition(i * 100 + 100, 0, 0)
                    .addMove(speed, speed);
            }
        };
        CreateOpponentsSystem.prototype.setPool = function (pool) {
            this.pool = pool;
        };
        return CreateOpponentsSystem;
    })();
    example.CreateOpponentsSystem = CreateOpponentsSystem;
})(example || (example = {}));
var example;
(function (example) {
    var CreatePlayerSystem = (function () {
        function CreatePlayerSystem() {
        }
        /**
         * Create the Player
         */
        CreatePlayerSystem.prototype.initialize = function () {
            this.pool.createEntity("Player")
                .addResource("Player")
                .addPosition(100, 0, 0)
                .addMove(0, 25)
                .setAcceleratable(true)
                .setPlayer(true)
                .addScore(0);
        };
        CreatePlayerSystem.prototype.setPool = function (pool) {
            this.pool = pool;
        };
        return CreatePlayerSystem;
    })();
    example.CreatePlayerSystem = CreatePlayerSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    0;
    var DestroySystem = (function () {
        function DestroySystem() {
        }
        Object.defineProperty(DestroySystem.prototype, "trigger", {
            get: function () {
                return Matcher.Destroy.onEntityAdded();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Execute when a Destroy component is added
         * @param entities
         */
        DestroySystem.prototype.execute = function (entities) {
            for (var i = 0, l = entities.length; i < l; i++) {
                this.pool.destroyEntity(entities[i]);
            }
        };
        DestroySystem.prototype.setPool = function (pool) {
            this.pool = pool;
        };
        return DestroySystem;
    })();
    example.DestroySystem = DestroySystem;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var MoveSystem = (function () {
        function MoveSystem() {
        }
        /**
         * Execute motion each frame
         */
        MoveSystem.prototype.execute = function () {
            var entities = this.group.getEntities();
            for (var i = 0, l = entities.length; i < l; i++) {
                var e = entities[i];
                var move = e.move;
                var pos = e.position;
                e.replacePosition(pos.x, pos.y + move.speed * .5, pos.z);
            }
        };
        MoveSystem.prototype.setPool = function (pool) {
            this.group = pool.getGroup(Matcher.allOf(Matcher.Move, Matcher.Position));
        };
        return MoveSystem;
    })();
    example.MoveSystem = MoveSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var Text = PIXI.Text;
    var ReachedFinishSystem = (function () {
        function ReachedFinishSystem() {
        }
        Object.defineProperty(ReachedFinishSystem.prototype, "trigger", {
            get: function () {
                return Matcher.Position.onEntityAdded();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Check if anyone crossed the finish line
         * @param entities
         */
        ReachedFinishSystem.prototype.execute = function (entities) {
            var finishLinePosY = this.pool.finishLineEntity.position.y;
            for (var i = 0, l = entities.length; i < l; i++) {
                var e = entities[i];
                if (e.position.y > finishLinePosY) {
                    if (e.isPlayer) {
                        var label = new Text('', { font: 'bold 50px Arial', fill: 'white' });
                        label.anchor.set(0.5, 0.5);
                        label.position.set(bosco.config.width / 2, 100);
                        viewContainer.addChild(label);
                        switch (e.score.value) {
                            case 0:
                                label.text = "You Win!";
                                break;
                            case 1:
                                label.text = "2nd Place!";
                                break;
                            case 2:
                                label.text = "3rd Place!";
                                break;
                            default:
                                label.text = "You Lose!";
                        }
                    }
                    if (this.pool.hasScore)
                        this.pool.replaceScore(this.pool.score.value + 1);
                    e.isDestroy = true;
                }
            }
        };
        ReachedFinishSystem.prototype.setPool = function (pool) {
            this.pool = pool;
        };
        return ReachedFinishSystem;
    })();
    example.ReachedFinishSystem = ReachedFinishSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var RemoveViewSystem = (function () {
        function RemoveViewSystem() {
        }
        Object.defineProperty(RemoveViewSystem.prototype, "triggers", {
            get: function () {
                return [
                    Matcher.Resource.onEntityRemoved(),
                    Matcher.allOf(Matcher.Resource, Matcher.Destroy).onEntityAdded()
                ];
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Execute when both Resource and Destroy are present
         * @param entities
         */
        RemoveViewSystem.prototype.execute = function (entities) {
            for (var i = 0, l = entities.length; i < l; i++) {
                var e = entities[i];
                e.removeView();
            }
        };
        Object.defineProperty(RemoveViewSystem.prototype, "ensureComponents", {
            get: function () {
                return Matcher.View;
            },
            enumerable: true,
            configurable: true
        });
        RemoveViewSystem.prototype.setPool = function (pool) {
            pool.getGroup(Matcher.View).onEntityRemoved.add(this.onEntityRemoved);
        };
        RemoveViewSystem.prototype.onEntityRemoved = function (group, entity, index, component) {
            viewContainer.removeChild(component.sprite);
        };
        return RemoveViewSystem;
    })();
    example.RemoveViewSystem = RemoveViewSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var RenderPositionSystem = (function () {
        function RenderPositionSystem() {
        }
        Object.defineProperty(RenderPositionSystem.prototype, "trigger", {
            get: function () {
                return Matcher.allOf(Matcher.View, Matcher.Position).onEntityAdded();
            },
            enumerable: true,
            configurable: true
        });
        RenderPositionSystem.prototype.execute = function (entities) {
            for (var i = 0, l = entities.length; i < l; i++) {
                var e = entities[i];
                var pos = e.position;
                var sprite = e.view.sprite;
                sprite.position.set(pos.x, pos.y);
            }
        };
        Object.defineProperty(RenderPositionSystem.prototype, "ensureComponents", {
            get: function () {
                return Matcher.View;
            },
            enumerable: true,
            configurable: true
        });
        return RenderPositionSystem;
    })();
    example.RenderPositionSystem = RenderPositionSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Pools = example.Pools;
    var Systems = entitas.Systems;
    var GameController = (function () {
        function GameController() {
        }
        GameController.prototype.start = function () {
            this.systems = this.createSystems(Pools.pool);
            this.systems.initialize();
        };
        GameController.prototype.stop = function () {
            this.systems = null;
        };
        GameController.prototype.update = function (delta) {
            this.systems.execute();
        };
        GameController.prototype.createSystems = function (pool) {
            return new Systems()
                .add(pool.createSystem(example.CreateFinishLineSystem))
                .add(pool.createSystem(example.CreatePlayerSystem))
                .add(pool.createSystem(example.CreateOpponentsSystem))
                .add(pool.createSystem(example.AccelerateSystem))
                .add(pool.createSystem(example.MoveSystem))
                .add(pool.createSystem(example.ReachedFinishSystem))
                .add(pool.createSystem(example.RemoveViewSystem))
                .add(pool.createSystem(example.AddViewSystem))
                .add(pool.createSystem(example.RenderPositionSystem))
                .add(pool.createSystem(example.DestroySystem));
        };
        return GameController;
    })();
    example.GameController = GameController;
})(example || (example = {}));
var example;
(function (example) {
    var Input = bosco.utils.Input;
    var Pools = example.Pools;
    var InputController = (function () {
        function InputController() {
        }
        InputController.prototype.start = function () { };
        InputController.prototype.stop = function () { };
        InputController.prototype.update = function (delta) {
            Pools.pool.isAccelerating = Input.getMouseButtonDown(0);
        };
        return InputController;
    })();
    example.InputController = InputController;
})(example || (example = {}));
var example;
(function (example) {
    var Pools = example.Pools;
    var Matcher = entitas.Matcher;
    var Text = PIXI.Text;
    var ScoreLabelController = (function () {
        function ScoreLabelController() {
        }
        ScoreLabelController.prototype.start = function () {
            var _this = this;
            this.label = new Text('Score 0', { font: 'bold 50px Arial', fill: 'white' });
            this.label.position.set((bosco.config.width - this.label.width) / 2, 10);
            viewContainer.addChild(this.label);
            var pool = Pools.pool;
            pool.getGroup(Matcher.Score).onEntityAdded.add(function (group, entity, index, component) {
                _this.updateScore(entity.score.value);
            });
            this.fps = new Text('FPS', { font: 'bold 30px Arial', fill: 'white' });
            this.fps.position.set(0, 10);
            viewContainer.addChild(this.fps);
        };
        ScoreLabelController.prototype.update = function (delta) {
            var fps = bosco.fps;
            if (this._fps !== fps) {
                this.fps.text = 'FPS ' + fps;
                this._fps = fps;
            }
        };
        ScoreLabelController.prototype.updateScore = function (score) {
            this.label.text = 'Score ' + score;
        };
        return ScoreLabelController;
    })();
    example.ScoreLabelController = ScoreLabelController;
})(example || (example = {}));
var example;
(function (example) {
    var MenuController = (function () {
        function MenuController() {
        }
        MenuController.prototype.start = function () {
            var _this = this;
            var theme = bosco.config.theme;
            EZGUI.Theme.load([("assets/" + theme + "-theme/" + theme + "-theme.json")], function () {
                _this.gui = EZGUI.create(bosco.config.ezgui.menu, theme);
                _this.gui.on('play', function (event, btn) { return bosco.controller('game'); });
                _this.gui.on('options', function (event, btn) { return bosco.controller('game'); });
                viewContainer.addChild(_this.gui);
            });
        };
        MenuController.prototype.stop = function () {
            viewContainer.removeChild(this.gui);
        };
        MenuController.prototype.update = function (delta) {
        };
        return MenuController;
    })();
    example.MenuController = MenuController;
})(example || (example = {}));
//# sourceMappingURL=bosco.js.map